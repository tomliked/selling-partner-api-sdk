<?php
/**
 * ItemSummaryByMarketplace
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Catalog Items
 *
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\catalogItems\v2022_04_01;

use
ArrayAccess;
use SpApi\ObjectSerializer;
use SpApi\Model\ModelInterface;

/**
 * ItemSummaryByMarketplace Class Doc Comment
 *
 * @category Class
 * @description Information about an Amazon catalog item for the indicated &#x60;marketplaceId&#x60;.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemSummaryByMarketplace implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemSummaryByMarketplace';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'marketplace_id' => 'string',
             'adult_product' => 'bool',
             'autographed' => 'bool',
             'brand' => 'string',
             'browse_classification' => '\SpApi\Model\catalogItems\v2022_04_01\ItemBrowseClassification',
             'color' => 'string',
             'contributors' => '\SpApi\Model\catalogItems\v2022_04_01\ItemContributor[]',
             'item_classification' => 'string',
             'item_name' => 'string',
             'manufacturer' => 'string',
             'memorabilia' => 'bool',
             'model_number' => 'string',
             'package_quantity' => 'int',
             'part_number' => 'string',
             'release_date' => '\DateTime',
             'size' => 'string',
             'style' => 'string',
             'trade_in_eligible' => 'bool',
             'website_display_group' => 'string',
             'website_display_group_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'marketplace_id' => null,
            'adult_product' => null,
            'autographed' => null,
            'brand' => null,
            'browse_classification' => null,
            'color' => null,
            'contributors' => null,
            'item_classification' => null,
            'item_name' => null,
            'manufacturer' => null,
            'memorabilia' => null,
            'model_number' => null,
            'package_quantity' => null,
            'part_number' => null,
            'release_date' => 'date',
            'size' => null,
            'style' => null,
            'trade_in_eligible' => null,
            'website_display_group' => null,
            'website_display_group_name' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'marketplace_id' => false,
        'adult_product' => true,
        'autographed' => true,
        'brand' => true,
        'browse_classification' => true,
        'color' => true,
        'contributors' => true,
        'item_classification' => true,
        'item_name' => true,
        'manufacturer' => true,
        'memorabilia' => true,
        'model_number' => true,
        'package_quantity' => true,
        'part_number' => true,
        'release_date' => true,
        'size' => true,
        'style' => true,
        'trade_in_eligible' => true,
        'website_display_group' => true,
        'website_display_group_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'marketplace_id' => 'marketplaceId',
                'adult_product' => 'adultProduct',
                'autographed' => 'autographed',
                'brand' => 'brand',
                'browse_classification' => 'browseClassification',
                'color' => 'color',
                'contributors' => 'contributors',
                'item_classification' => 'itemClassification',
                'item_name' => 'itemName',
                'manufacturer' => 'manufacturer',
                'memorabilia' => 'memorabilia',
                'model_number' => 'modelNumber',
                'package_quantity' => 'packageQuantity',
                'part_number' => 'partNumber',
                'release_date' => 'releaseDate',
                'size' => 'size',
                'style' => 'style',
                'trade_in_eligible' => 'tradeInEligible',
                'website_display_group' => 'websiteDisplayGroup',
                'website_display_group_name' => 'websiteDisplayGroupName'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'marketplace_id' => 'setMarketplaceId',
        'adult_product' => 'setAdultProduct',
        'autographed' => 'setAutographed',
        'brand' => 'setBrand',
        'browse_classification' => 'setBrowseClassification',
        'color' => 'setColor',
        'contributors' => 'setContributors',
        'item_classification' => 'setItemClassification',
        'item_name' => 'setItemName',
        'manufacturer' => 'setManufacturer',
        'memorabilia' => 'setMemorabilia',
        'model_number' => 'setModelNumber',
        'package_quantity' => 'setPackageQuantity',
        'part_number' => 'setPartNumber',
        'release_date' => 'setReleaseDate',
        'size' => 'setSize',
        'style' => 'setStyle',
        'trade_in_eligible' => 'setTradeInEligible',
        'website_display_group' => 'setWebsiteDisplayGroup',
        'website_display_group_name' => 'setWebsiteDisplayGroupName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'marketplace_id' => 'getMarketplaceId',
        'adult_product' => 'getAdultProduct',
        'autographed' => 'getAutographed',
        'brand' => 'getBrand',
        'browse_classification' => 'getBrowseClassification',
        'color' => 'getColor',
        'contributors' => 'getContributors',
        'item_classification' => 'getItemClassification',
        'item_name' => 'getItemName',
        'manufacturer' => 'getManufacturer',
        'memorabilia' => 'getMemorabilia',
        'model_number' => 'getModelNumber',
        'package_quantity' => 'getPackageQuantity',
        'part_number' => 'getPartNumber',
        'release_date' => 'getReleaseDate',
        'size' => 'getSize',
        'style' => 'getStyle',
        'trade_in_eligible' => 'getTradeInEligible',
        'website_display_group' => 'getWebsiteDisplayGroup',
        'website_display_group_name' => 'getWebsiteDisplayGroupName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ITEM_CLASSIFICATION_BASE_PRODUCT = 'BASE_PRODUCT';
    public const ITEM_CLASSIFICATION_OTHER = 'OTHER';
    public const ITEM_CLASSIFICATION_PRODUCT_BUNDLE = 'PRODUCT_BUNDLE';
    public const ITEM_CLASSIFICATION_VARIATION_PARENT = 'VARIATION_PARENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemClassificationAllowableValues(): array
    {
        return [
            self::ITEM_CLASSIFICATION_BASE_PRODUCT,
            self::ITEM_CLASSIFICATION_OTHER,
            self::ITEM_CLASSIFICATION_PRODUCT_BUNDLE,
            self::ITEM_CLASSIFICATION_VARIATION_PARENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('marketplace_id', $data ?? [], null);
        $this->setIfExists('adult_product', $data ?? [], null);
        $this->setIfExists('autographed', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('browse_classification', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('contributors', $data ?? [], null);
        $this->setIfExists('item_classification', $data ?? [], null);
        $this->setIfExists('item_name', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('memorabilia', $data ?? [], null);
        $this->setIfExists('model_number', $data ?? [], null);
        $this->setIfExists('package_quantity', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('release_date', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('style', $data ?? [], null);
        $this->setIfExists('trade_in_eligible', $data ?? [], null);
        $this->setIfExists('website_display_group', $data ?? [], null);
        $this->setIfExists('website_display_group_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['marketplace_id'] === null) {
            $invalidProperties[] = "'marketplace_id' can't be null";
        }
        $allowedValues = $this->getItemClassificationAllowableValues();
        if (!is_null($this->container['item_classification']) && !in_array($this->container['item_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_classification', must be one of '%s'",
                $this->container['item_classification'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketplace_id
     *
     * @return string
     */
    public function getMarketplaceId(): string
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     *
     * @param string $marketplace_id Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *
     * @return self
     */
    public function setMarketplaceId(string $marketplace_id): self
    {
        if (is_null($marketplace_id)) {
            throw new \InvalidArgumentException('non-nullable marketplace_id cannot be null');
        }
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets adult_product
     *
     * @return bool|null
     */
    public function getAdultProduct(): ?bool
    {
        return $this->container['adult_product'];
    }

    /**
     * Sets adult_product
     *
     * @param bool|null $adult_product When `true`, the Amazon catalog item is intended for an adult audience or is sexual in nature.
     *
     * @return self
     */
    public function setAdultProduct(?bool $adult_product): self
    {
        if (is_null($adult_product)) {
            array_push($this->openAPINullablesSetToNull, 'adult_product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adult_product', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adult_product'] = $adult_product;

        return $this;
    }

    /**
     * Gets autographed
     *
     * @return bool|null
     */
    public function getAutographed(): ?bool
    {
        return $this->container['autographed'];
    }

    /**
     * Sets autographed
     *
     * @param bool|null $autographed When `true`, the Amazon catalog item is autographed.
     *
     * @return self
     */
    public function setAutographed(?bool $autographed): self
    {
        if (is_null($autographed)) {
            array_push($this->openAPINullablesSetToNull, 'autographed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autographed', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autographed'] = $autographed;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand(): ?string
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Name of the brand that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setBrand(?string $brand): self
    {
        if (is_null($brand)) {
            array_push($this->openAPINullablesSetToNull, 'brand');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets browse_classification
     *
     * @return \SpApi\Model\catalogItems\v2022_04_01\ItemBrowseClassification|null
     */
    public function getBrowseClassification(): ?\SpApi\Model\catalogItems\v2022_04_01\ItemBrowseClassification
    {
        return $this->container['browse_classification'];
    }

    /**
     * Sets browse_classification
     *
     * @param \SpApi\Model\catalogItems\v2022_04_01\ItemBrowseClassification|null $browse_classification browse_classification
     *
     * @return self
     */
    public function setBrowseClassification(?\SpApi\Model\catalogItems\v2022_04_01\ItemBrowseClassification $browse_classification): self
    {
        if (is_null($browse_classification)) {
            array_push($this->openAPINullablesSetToNull, 'browse_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('browse_classification', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['browse_classification'] = $browse_classification;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor(): ?string
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color The color that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setColor(?string $color): self
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets contributors
     *
     * @return array|null
     */
    public function getContributors(): ?array
    {
        return $this->container['contributors'];
    }

    /**
     * Sets contributors
     *
     * @param array|null $contributors Individual contributors to the creation of the item, such as the authors or actors.
     *
     * @return self
     */
    public function setContributors(?array $contributors): self
    {
        if (is_null($contributors)) {
            array_push($this->openAPINullablesSetToNull, 'contributors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contributors', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contributors'] = $contributors;

        return $this;
    }

    /**
     * Gets item_classification
     *
     * @return string|null
     */
    public function getItemClassification(): ?string
    {
        return $this->container['item_classification'];
    }

    /**
     * Sets item_classification
     *
     * @param string|null $item_classification Classification type that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setItemClassification(?string $item_classification): self
    {
        if (is_null($item_classification)) {
            array_push($this->openAPINullablesSetToNull, 'item_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_classification', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getItemClassificationAllowableValues();
        if (!is_null($item_classification) && !in_array($item_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_classification', must be one of '%s'",
                    $item_classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_classification'] = $item_classification;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string|null
     */
    public function getItemName(): ?string
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string|null $item_name The name that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setItemName(?string $item_name): self
    {
        if (is_null($item_name)) {
            array_push($this->openAPINullablesSetToNull, 'item_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer(): ?string
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer The name of the manufacturer that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setManufacturer(?string $manufacturer): self
    {
        if (is_null($manufacturer)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturer', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets memorabilia
     *
     * @return bool|null
     */
    public function getMemorabilia(): ?bool
    {
        return $this->container['memorabilia'];
    }

    /**
     * Sets memorabilia
     *
     * @param bool|null $memorabilia When true, the item is classified as memorabilia.
     *
     * @return self
     */
    public function setMemorabilia(?bool $memorabilia): self
    {
        if (is_null($memorabilia)) {
            array_push($this->openAPINullablesSetToNull, 'memorabilia');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memorabilia', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['memorabilia'] = $memorabilia;

        return $this;
    }

    /**
     * Gets model_number
     *
     * @return string|null
     */
    public function getModelNumber(): ?string
    {
        return $this->container['model_number'];
    }

    /**
     * Sets model_number
     *
     * @param string|null $model_number The model number that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setModelNumber(?string $model_number): self
    {
        if (is_null($model_number)) {
            array_push($this->openAPINullablesSetToNull, 'model_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model_number', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model_number'] = $model_number;

        return $this;
    }

    /**
     * Gets package_quantity
     *
     * @return int|null
     */
    public function getPackageQuantity(): ?int
    {
        return $this->container['package_quantity'];
    }

    /**
     * Sets package_quantity
     *
     * @param int|null $package_quantity The quantity of the Amazon catalog item within one package.
     *
     * @return self
     */
    public function setPackageQuantity(?int $package_quantity): self
    {
        if (is_null($package_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'package_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package_quantity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['package_quantity'] = $package_quantity;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber(): ?string
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number The part number that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setPartNumber(?string $part_number): self
    {
        if (is_null($part_number)) {
            array_push($this->openAPINullablesSetToNull, 'part_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('part_number', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return \DateTime|null
     */
    public function getReleaseDate(): ?\DateTime
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param \DateTime|null $release_date The earliest date on which the Amazon catalog item can be shipped to customers.
     *
     * @return self
     */
    public function setReleaseDate(?\DateTime $release_date): self
    {
        if (is_null($release_date)) {
            array_push($this->openAPINullablesSetToNull, 'release_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('release_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize(): ?string
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size The name of the size of the Amazon catalog item.
     *
     * @return self
     */
    public function setSize(?string $size): self
    {
        if (is_null($size)) {
            array_push($this->openAPINullablesSetToNull, 'size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string|null
     */
    public function getStyle(): ?string
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string|null $style The name of the style that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setStyle(?string $style): self
    {
        if (is_null($style)) {
            array_push($this->openAPINullablesSetToNull, 'style');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('style', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets trade_in_eligible
     *
     * @return bool|null
     */
    public function getTradeInEligible(): ?bool
    {
        return $this->container['trade_in_eligible'];
    }

    /**
     * Sets trade_in_eligible
     *
     * @param bool|null $trade_in_eligible When true, the Amazon catalog item is eligible for trade-in.
     *
     * @return self
     */
    public function setTradeInEligible(?bool $trade_in_eligible): self
    {
        if (is_null($trade_in_eligible)) {
            array_push($this->openAPINullablesSetToNull, 'trade_in_eligible');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_in_eligible', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_in_eligible'] = $trade_in_eligible;

        return $this;
    }

    /**
     * Gets website_display_group
     *
     * @return string|null
     */
    public function getWebsiteDisplayGroup(): ?string
    {
        return $this->container['website_display_group'];
    }

    /**
     * Sets website_display_group
     *
     * @param string|null $website_display_group The identifier of the website display group that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setWebsiteDisplayGroup(?string $website_display_group): self
    {
        if (is_null($website_display_group)) {
            array_push($this->openAPINullablesSetToNull, 'website_display_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website_display_group', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website_display_group'] = $website_display_group;

        return $this;
    }

    /**
     * Gets website_display_group_name
     *
     * @return string|null
     */
    public function getWebsiteDisplayGroupName(): ?string
    {
        return $this->container['website_display_group_name'];
    }

    /**
     * Sets website_display_group_name
     *
     * @param string|null $website_display_group_name The display name of the website display group that is associated with the Amazon catalog item.
     *
     * @return self
     */
    public function setWebsiteDisplayGroupName(?string $website_display_group_name): self
    {
        if (is_null($website_display_group_name)) {
            array_push($this->openAPINullablesSetToNull, 'website_display_group_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website_display_group_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website_display_group_name'] = $website_display_group_name;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


