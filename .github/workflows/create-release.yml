name: Create Release

on:
  workflow_dispatch:
    inputs:
      newVersionNumber:
        type: string
        description: New version number
        required: true

env:
  SDK_VERSION: ${{ github.event.inputs.newVersionNumber }}

jobs:
  release_java:
    runs-on: ubuntu-latest
    #env:
      #ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.JAVA_OSSRH_USER_NAME }}
      #ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.JAVA_OSSRH_PASSWORD }}
      #ORG_GRADLE_PROJECT_signingKey: ${{ secrets.JAVA_SIGNING_KEY }}
      #ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.JAVA_SIGNING_PASSWORD }}

    steps:
      #- uses: actions/checkout@v4
      #- uses: actions/setup-java@v4
        #with:
          #java-version: '11'
          #distribution: 'corretto'
          #cache: gradle
      - name: Setup Gradle
        run: |
          echo "Setup Gradle"
        #uses: gradle/actions/setup-gradle@v4
      - name: Publish Java SDK to Maven Central
        run: |
            echo "Publish Java SDK to Maven Central"
        #working-directory: java/sdk
        #run: ./gradlew publish

  release_php:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Repository (selling-partner-api-sdk)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          path: selling-partner-api-sdk

      - name: Clone Target Repository (selling-partner-api-php-release)
        run: |
          mkdir -p ~/workspace
          cd ~/workspace
          echo "Cloning selling-partner-api-php-release..."
          git clone --depth=1 https://x-access-token:${{ secrets.TOMLIKED_PAT }}@github.com/amzn/selling-partner-api-php-release.git target-repo || { echo "Git clone failed"; exit 1; }

      - name: Fully Sync php/sdk/ to Target Repo
        run: |
          echo "Syncing selling-partner-api-sdk/php/sdk/ to ~/workspace/target-repo/..."
          rsync -av --delete --force --exclude='.git/' --exclude='test/' selling-partner-api-sdk/php/sdk/ ~/workspace/target-repo/
          echo "Sync complete. Checking target-repo/"
          ls -la ~/workspace/target-repo/

      - name: Commit and Push Changes
        run: |
          cd ~/workspace/target-repo
          git config user.email "tomliked@amazon.co.jp"
          git config user.name "tomliked"
          BRANCH_NAME="sync-sdk-${{ env.SDK_VERSION }}-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          git add -A
          git commit -m "Sync PHP SDK - Version ${{ env.SDK_VERSION }}" || echo "No changes to commit"
          
          git remote set-url origin https://x-access-token:${{ secrets.TOMLIKED_PAT }}@github.com/amzn/selling-partner-api-php-release.git
          git push origin "$BRANCH_NAME"
      
      - name: Create a Pull Request
        id: create_pr
        run: |
          cd ~/workspace/target-repo
          echo "Current directory: $(pwd)"
          git status || { echo "ERROR: Not in a Git repository!"; exit 1; }
          gh pr create --title "Sync PHP SDK - Version ${{ env.SDK_VERSION }}" \
                       --body "This PR syncs the latest changes from \`selling-partner-api-sdk/php/sdk/\` to \`selling-partner-api-php-release/\`." \
                       --head "${{ env.BRANCH_NAME }}" --base "main"
        env:
          GH_TOKEN: ${{ secrets.TOMLIKED_PAT }}

  tag_and_release:
    needs: [release_java, release_php]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ github.event.inputs.newVersionNumber }}",
              sha: context.sha
            })
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.newVersionNumber }}
